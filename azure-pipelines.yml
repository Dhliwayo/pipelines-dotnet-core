name: $(SourceBranchName)_$(date:yyyyMMdd)$(rev:.r)_PerilsProximity_Build_Configs

#Pipeline actions:
# select environment eg staging, fint, pre-prod, prod
# PnP config files are copied to the machine(s) for the target environment
# SSH service connections must exist for each of the environments in a variable group for that environment
# Variable group name PerilsProximity.Configs.TARGET_ENVIRONMENT e.g  PerilsProximity.Configs.Staging
# Once the files are copied, the next step requires manual approval
# Check that the files copied currently to $(working_directory)\ are as expected
# After manual approval, the copied files are deployed into relevant folders eg wwwroot, PnP services etc

#TODO:
# stop and start services
# smoke testing?


trigger:
  - config-pipeline
  - master

appendCommitMessageToRunName: false

pool:
  vmImage: ubuntu-latest

parameters:
  - name: environment
    displayName: Environment
    type: string
    default: staging
    values:
    - staging
    - fint
    - preprod
    - production

variables:
- group: PerilsProximity.Configs.${{ parameters.environment }} # note there's a dash at the beginning of the line
- name: time
  value: $[ format('{0:yyyy}-{0:MM}-{0:dd}-{0:HHmm}', pipeline.startTime) ]
- name: artifactName
  value: PnP-Config-Drop-${{ parameters.environment }}
# - name: server_service_connections
#   value: $(hosts)

# The SSH service connection with this names must exist in ADO
# These variables cannot be stored in library groups as the read at run time?
- name: server_service_connections
  ${{ if eq(parameters.environment, 'staging') }}:
    value: pnp_staging_ssh_connection_184|pnp_staging_ssh_connection_185
  ${{ if eq(parameters.environment, 'fint') }}:
    value: pnp_fint_ssh_connection_184|pnp_fint_ssh_connection_185
  ${{ if eq(parameters.environment, 'preprod') }}:
    value: pnp_preprod_ssh_connection_184|pnp_preprod_ssh_connection_185
  ${{ if eq(parameters.environment, 'production') }}:
    value: pnp_production_ssh_connection_184|pnp_production_ssh_connection_185

jobs:
- job: CopyConfigFilesToEnvironment
  displayName: ${{ parameters.environment }} copy configs
  steps:
    - script: echo "library hosts value - $(hosts)  "
    - ${{ each host in split(variables.hosts,'|') }}:
       - script:  echo "host - ${{ host }}"
    - script: echo 'Hosts from library - $(server_service_connections) '
    - ${{ each ssh_con in split(variables.server_service_connections,'|') }}:
      - script:  echo "ssh_con - ${{ ssh_con }}"


    # - ${{ each ssh_con in split(variables.hosts,'|') }}:
    #   - script:  echo "Processing ${{ ssh_con }} "
    #   displayName: Dummy ${{ ssh_con }} 
    # - ${{ each ssh_connection in split(variables.hosts,'|') }}:
    #   - script:  echo "Processing ${{ ssh_connection }} "
    #   - task: SSH@0
    #     displayName: 'Run deployment script ${{ parameters.environment }} ${{ ssh_connection}}'
    #     inputs:
    #       sshEndpoint: ${{ssh_connection}}
    #       runOptions: 'commands'
    #       commands: |
    #         PowerShell $(working_directory)\$(artifactName)\${{ parameters.environment }}\deploy_config.ps1
    #       failOnStdErr: true 
    #       readyTimeout: '20000'      

#     - task: CopyFiles@2
#       displayName: 'Copy ${{ parameters.environment }} config  files to: $(Build.ArtifactStagingDirectory)'
#       inputs:
#         contents: |
#           ${{ parameters.environment }}/config/batch.config
#           ${{ parameters.environment }}/config/BatchProcessorService.exe.config
#           ${{ parameters.environment }}/config/BatchProcessor_Log.config
#           ${{ parameters.environment }}/config/BatchSubmissionService.exe.config
#           ${{ parameters.environment }}/config/BatchSubmission_log.config
#           ${{ parameters.environment }}/config/BatchWebTestHarness.exe.config
#           ${{ parameters.environment }}/config/Create_Message.exe.config
#           ${{ parameters.environment }}/config/MQListener.exe.config
#           ${{ parameters.environment }}/config/TEst_App.exe.config
#           ${{ parameters.environment }}/config/BatchManager/Web.config
#           ${{ parameters.environment }}/config/BatchStatus/Web.config
#           ${{ parameters.environment }}/config/BestAddress/Web.config
#           ${{ parameters.environment }}/config/Geoassessment/Web.config
#           ${{ parameters.environment }}/config/GlobalExposure/Web.config
#           ${{ parameters.environment }}/config/LocatorHubWS/Web.config
#           ${{ parameters.environment }}/config/PerilsPlusWS/Web.config
#           utilities/deploy_config.ps1
#         targetFolder: $(Build.ArtifactStagingDirectory)
#     - task: PowerShell@2
#       displayName: 'Move deploy_config script'
#       inputs:
#         targetType: 'inline'
#         script: |
#           Move-Item -Path $(Build.ArtifactStagingDirectory)/utilities/deploy_config.ps1 -Destination $(Build.ArtifactStagingDirectory)/${{ parameters.environment }}/deploy_config.ps1
#     - task: CmdLine@2
#       displayName: Display tree of build artifact from $(Build.ArtifactStagingDirectory) 
#       inputs:
#         script: |
#           echo ##[debug]List of built in variables in Build.ArtifactStagingDirectory 
#           tree $(Build.ArtifactStagingDirectory) /F
#     - task: PublishBuildArtifacts@1
#       displayName: 'Publish artifact'
#       inputs:
#         pathToPublish: $(Build.ArtifactStagingDirectory)
#         artifactName: $(artifactName)

#     # Download build artifacts v1
#     # Download files that were saved as artifacts of a completed build.
#     - task: DownloadBuildArtifacts@1
#       displayName: 'Download build artifact'
#       inputs:
#         buildType: 'current' # 'current' | 'specific'. Required. Download artifacts produced by. Default: current.
#         buildVersionToDownload: 'latest' # 'latest' | 'latestFromBranch' | 'specific'. Required when buildType == specific. Build version to download. Default: latest.
#         downloadType: 'single' # 'single' | 'specific'. Required. Download type. Default: single.
#         artifactName: $(artifactName) # string. Required when downloadType == single. Artifact name. 
#         downloadPath: $(System.ArtifactsDirectory) # string. Required. Destination directory. Default: $(System.ArtifactsDirectory).
#         cleanDestinationFolder: true # boolean. Clean destination folder. Default: false.
#         checkDownloadedFiles: true # boolean. Check downloaded files. Default: false.
#     - task: CmdLine@2
#       displayName: Display tree of sytem artifact dir from $(System.ArtifactsDirectory)
#       inputs:
#         script: |
#             echo ##[debug]List of built in variables in System.ArtifactsDirectory 
#             tree $(System.ArtifactsDirectory) /F
#     - script: echo Copying files to $hosts
#     - ${{ each ssh_connection in split(variables.hosts,'|') }}:
#       - task: CopyFilesOverSSH@0
#         displayName: 'SSH copy artifacts to ${{ parameters.environment }}  using ${{ ssh_connection }} '
#         inputs:
#           sshEndpoint: ${{ ssh_connection }}
#           sourceFolder: $(System.ArtifactsDirectory)
#           contents: '**' 
#           targetFolder: '$(working_directory)\'
#           isWindowsOnTarget: true
#           cleanTargetFolder: true
#           readyTimeout: '20000'
#           overwrite: true
#           failOnEmptySource: true      

# - job: ApproveDeployment
#   displayName: ${{ parameters.environment }} wait for manual approval 
#   dependsOn: CopyConfigFilesToEnvironment
#   timeoutInMinutes: 4320 # job times out in 3 days
#   pool: server 
#   steps:   
#   - task: ManualValidation@1
#     timeoutInMinutes: 1440 # task times out in 1 day
#     inputs:
#       notifyUsers: |
#         itai.dhliwayo@gmail.com
#       instructions: 'Please validate the build drop in ${{ parameters.environment }} and resume deployment'
#       allowApproversToApproveTheirOwnRuns: true
#       onTimeout: 'reject'

# - job: Deploy
#   displayName:  ${{ parameters.environment }}  deploy 
#   dependsOn: ApproveDeployment
#   steps:
#     - script: echo Copying files to $hosts
#     - ${{ each ssh_connection in split(variables.hosts,'|') }}:
#       - task: SSH@0
#         displayName: 'Run deployment script ${{ parameters.environment }} ${{ ssh_connection}}'
#         inputs:
#           sshEndpoint: ${{ssh_connection}}
#           runOptions: 'commands'
#           commands: |
#             PowerShell $(working_directory)\$(artifactName)\${{ parameters.environment }}\deploy_config.ps1
#           failOnStdErr: true 
#           readyTimeout: '20000'
    



  

 
