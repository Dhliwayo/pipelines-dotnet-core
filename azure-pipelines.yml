name: $(SourceBranchName)_$(date:yyyyMMdd)$(rev:.r)_PerilsProximity_Build_Configs

#Pipeline actions:
# select environment and config files are copied to the machin destination
# variable group is picked from selected environment
# actual deployment is done after manual approval
# stops, services
# deploys
# starts services
# for pre-prod & prod, this is repeated for all the machines 

#TODO:
# ssh connection for individual machines
# read servers from variable group 

trigger:
  - config-pipeline
  - master

appendCommitMessageToRunName: false

pool:
  vmImage: windows-latest

parameters:
  - name: environment
    displayName: Environment
    type: string
    default: staging
    values:
    - staging
    - fint
    - preprod
    - production

variables:
- group: PerilsProximity.Configs.${{ parameters.environment }} # note there's a dash at the beginning of the line
- name: time
  value: $[ format('{0:yyyy}-{0:MM}-{0:dd}-{0:HHmm}', pipeline.startTime) ]
- name: artifactName
  value: PnP-Config-Drop-${{ parameters.environment }}
- name: servers
  value: 20.117.169.185|20.117.169.184

jobs:
- job: ReadServerInfo
  displayName: Read target servers variables from library 
  steps:
    - task: PowerShell@2
      displayName: 'Get Json values and set output variables $(hosts)'
      name: setOutput
      inputs:
        targetType: inline
        script: |
              $Input = ' $(hosts) ' | ConvertFrom-Json
              Write-Host $Input
              Write-Host 'Found servers: ' $Input.count
              Write-Host "##vso[task.setvariable variable=server_connection;isOutput=true]$Input"
    - task: PowerShell@2
      displayName: 'Read server connection variable $(server_connection)'
      inputs:
        targetType: inline
        script: |
              echo "server_connection:  $(server_connection)"
    - ${{ each vm in variables.server_connection }}:
      - task: PowerShell@2
        displayName: Check ${{ vm.hostname }} Disks
        inputs:
          targetType: inline
          script: |
                echo "server_connection:  ${{ vm.hostname }}"

# # Parse the Json file and get the values.
#           vaule1=$(cat file.json | jq -r '.example.value1')
#           vaule2=$(cat file.json | jq -r '.example.value2')
# # Set the values as output variables.
#           echo "##vso[task.setvariable variable=vaule1;isoutput=true]$vaule1"
#           echo "##vso[task.setvariable variable=vaule2;isoutput=true]$vaule2"
# - job: CopyConfigFilesToEnvironment
#   displayName: ${{ parameters.environment }} copy configs  
#     - task: CopyFiles@2
#       displayName: 'Copy ${{ parameters.environment }} config  files to: $(Build.ArtifactStagingDirectory)'
#       inputs:
#         contents: |
#           ${{ parameters.environment }}/config/batch.config
#           ${{ parameters.environment }}/config/BatchProcessorService.exe.config
#           ${{ parameters.environment }}/config/BatchProcessor_Log.config
#           ${{ parameters.environment }}/config/BatchSubmissionService.exe.config
#           ${{ parameters.environment }}/config/BatchSubmission_log.config
#           ${{ parameters.environment }}/config/BatchWebTestHarness.exe.config
#           ${{ parameters.environment }}/config/Create_Message.exe.config
#           ${{ parameters.environment }}/config/MQListener.exe.config
#           ${{ parameters.environment }}/config/TEst_App.exe.config
#           ${{ parameters.environment }}/config/BatchManager/Web.config
#           ${{ parameters.environment }}/config/BatchStatus/Web.config
#           ${{ parameters.environment }}/config/BestAddress/Web.config
#           ${{ parameters.environment }}/config/Geoassessment/Web.config
#           ${{ parameters.environment }}/config/GlobalExposure/Web.config
#           ${{ parameters.environment }}/config/LocatorHubWS/Web.config
#           ${{ parameters.environment }}/config/PerilsPlusWS/Web.config
#           utilities/deploy_config.ps1
#         targetFolder: $(Build.ArtifactStagingDirectory)
#     - task: PowerShell@2
#       displayName: 'Move deploy_config script'
#       inputs:
#         targetType: 'inline'
#         script: |
#           Move-Item -Path $(Build.ArtifactStagingDirectory)/utilities/deploy_config.ps1 -Destination $(Build.ArtifactStagingDirectory)/${{ parameters.environment }}/deploy_config.ps1
#     - task: CmdLine@2
#       displayName: Display tree of build artifact from $(Build.ArtifactStagingDirectory) 
#       inputs:
#         script: |
#           echo ##[debug]List of built in variables in Build.ArtifactStagingDirectory 
#           tree $(Build.ArtifactStagingDirectory) /F
#     - task: PublishBuildArtifacts@1
#       displayName: 'Publish artifact'
#       inputs:
#         pathToPublish: $(Build.ArtifactStagingDirectory)
#         artifactName: $(artifactName)

#     # Download build artifacts v1
#     # Download files that were saved as artifacts of a completed build.
#     - task: DownloadBuildArtifacts@1
#       displayName: 'Download artifact'
#       inputs:
#         buildType: 'current' # 'current' | 'specific'. Required. Download artifacts produced by. Default: current.
#         buildVersionToDownload: 'latest' # 'latest' | 'latestFromBranch' | 'specific'. Required when buildType == specific. Build version to download. Default: latest.
#         downloadType: 'single' # 'single' | 'specific'. Required. Download type. Default: single.
#         artifactName: $(artifactName) # string. Required when downloadType == single. Artifact name. 
#         downloadPath: $(System.ArtifactsDirectory) # string. Required. Destination directory. Default: $(System.ArtifactsDirectory).
#         cleanDestinationFolder: true # boolean. Clean destination folder. Default: false.
#         checkDownloadedFiles: true # boolean. Check downloaded files. Default: false.
#     - task: CmdLine@2
#       displayName: Display tree of sytem artifact dir from $(System.ArtifactsDirectory)
#       inputs:
#         script: |
#             echo ##[debug]List of built in variables in System.ArtifactsDirectory 
#             tree $(System.ArtifactsDirectory) /F

#     - ${{ each env in split(variables.servers,'|') }}:
#       - task: CopyFilesOverSSH@0
#         displayName: 'SSH Copy files from $(System.ArtifactsDirectory) to ${{ parameters.environment }} using $(deployment_ssh_connection) ${{ env }} '
#         inputs:
#           sshEndpoint: $(deployment_ssh_connection)
#           sourceFolder: $(System.ArtifactsDirectory)
#           contents: '**'
#           targetFolder: 'C:\PnPConfigsDeployment\'
#           isWindowsOnTarget: true
#           cleanTargetFolder: true
#           readyTimeout: '20000'
#           overwrite: true
#           failOnEmptySource: true      

# - job: ApproveDeployment
#   displayName: ${{ parameters.environment }} wait for manual approval 
#   dependsOn: CopyConfigFilesToEnvironment
#   timeoutInMinutes: 4320 # job times out in 3 days
#   pool: server 
#   steps:   
#   - task: ManualValidation@1
#     timeoutInMinutes: 1440 # task times out in 1 day
#     inputs:
#       notifyUsers: |
#         itai.dhliwayo@gmail.com
#       instructions: 'Please validate the build drop in ${{ parameters.environment }} and resume deployment'
#       allowApproversToApproveTheirOwnRuns: true
#       onTimeout: 'reject'

# - job: Deploy
#   displayName:  ${{ parameters.environment }}  deploy 
#   dependsOn: ApproveDeployment
#   steps:
#     - ${{ each env in split(variables.servers,'|') }}:
#       - task: SSH@0
#         displayName: 'Run deployment script ${{ parameters.environment }} $(deployment_ssh_connection) ${{ env }} '
#         inputs:
#           sshEndpoint: $(deployment_ssh_connection)
#           runOptions: 'commands'
#           commands: |
#             PowerShell C:\PnPConfigsDeployment\$(artifactName)\${{ parameters.environment }}\deploy_config.ps1
#           failOnStdErr: true 
#           readyTimeout: '20000'
  



  

 
